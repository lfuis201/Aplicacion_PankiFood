//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PankiFoodProject.ClientesServices {
    using System.Xml.Serialization;
    using System.Diagnostics;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ClientesServicesSoap", Namespace="http://tempuri.org/")]
    public partial class ClientesServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CrearClienteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObtenerClientesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActualizarClienteOperationCompleted;
        
        private System.Threading.SendOrPostCallback BorrarClienteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListarClientePorIdOperationCompleted;
        
        /// <remarks/>
        public ClientesServices() {
            this.Url = "http://localhost:8081/ClientesServices.asmx";
        }
        
        public ClientesServices(string url) {
            this.Url = url;
        }
        
        /// <remarks/>
        public event CrearClienteCompletedEventHandler CrearClienteCompleted;
        
        /// <remarks/>
        public event ObtenerClientesCompletedEventHandler ObtenerClientesCompleted;
        
        /// <remarks/>
        public event ActualizarClienteCompletedEventHandler ActualizarClienteCompleted;
        
        /// <remarks/>
        public event BorrarClienteCompletedEventHandler BorrarClienteCompleted;
        
        /// <remarks/>
        public event ListarClientePorIdCompletedEventHandler ListarClientePorIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CrearCliente", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CrearCliente(string nombre, int idTelefono, string numeroCuenta) {
            object[] results = this.Invoke("CrearCliente", new object[] {
                        nombre,
                        idTelefono,
                        numeroCuenta});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CrearClienteAsync(string nombre, int idTelefono, string numeroCuenta) {
            this.CrearClienteAsync(nombre, idTelefono, numeroCuenta, null);
        }
        
        /// <remarks/>
        public void CrearClienteAsync(string nombre, int idTelefono, string numeroCuenta, object userState) {
            if ((this.CrearClienteOperationCompleted == null)) {
                this.CrearClienteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCrearClienteOperationCompleted);
            }
            this.InvokeAsync("CrearCliente", new object[] {
                        nombre,
                        idTelefono,
                        numeroCuenta}, this.CrearClienteOperationCompleted, userState);
        }
        
        private void OnCrearClienteOperationCompleted(object arg) {
            if ((this.CrearClienteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CrearClienteCompleted(this, new CrearClienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtenerClientes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ObtenerClientes() {
            object[] results = this.Invoke("ObtenerClientes", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ObtenerClientesAsync() {
            this.ObtenerClientesAsync(null);
        }
        
        /// <remarks/>
        public void ObtenerClientesAsync(object userState) {
            if ((this.ObtenerClientesOperationCompleted == null)) {
                this.ObtenerClientesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObtenerClientesOperationCompleted);
            }
            this.InvokeAsync("ObtenerClientes", new object[0], this.ObtenerClientesOperationCompleted, userState);
        }
        
        private void OnObtenerClientesOperationCompleted(object arg) {
            if ((this.ObtenerClientesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObtenerClientesCompleted(this, new ObtenerClientesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActualizarCliente", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ActualizarCliente(int id, string nombre, int idTelefono, string numeroCuenta) {
            object[] results = this.Invoke("ActualizarCliente", new object[] {
                        id,
                        nombre,
                        idTelefono,
                        numeroCuenta});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ActualizarClienteAsync(int id, string nombre, int idTelefono, string numeroCuenta) {
            this.ActualizarClienteAsync(id, nombre, idTelefono, numeroCuenta, null);
        }
        
        /// <remarks/>
        public void ActualizarClienteAsync(int id, string nombre, int idTelefono, string numeroCuenta, object userState) {
            if ((this.ActualizarClienteOperationCompleted == null)) {
                this.ActualizarClienteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActualizarClienteOperationCompleted);
            }
            this.InvokeAsync("ActualizarCliente", new object[] {
                        id,
                        nombre,
                        idTelefono,
                        numeroCuenta}, this.ActualizarClienteOperationCompleted, userState);
        }
        
        private void OnActualizarClienteOperationCompleted(object arg) {
            if ((this.ActualizarClienteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActualizarClienteCompleted(this, new ActualizarClienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BorrarCliente", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BorrarCliente(int id) {
            object[] results = this.Invoke("BorrarCliente", new object[] {
                        id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BorrarClienteAsync(int id) {
            this.BorrarClienteAsync(id, null);
        }
        
        /// <remarks/>
        public void BorrarClienteAsync(int id, object userState) {
            if ((this.BorrarClienteOperationCompleted == null)) {
                this.BorrarClienteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBorrarClienteOperationCompleted);
            }
            this.InvokeAsync("BorrarCliente", new object[] {
                        id}, this.BorrarClienteOperationCompleted, userState);
        }
        
        private void OnBorrarClienteOperationCompleted(object arg) {
            if ((this.BorrarClienteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BorrarClienteCompleted(this, new BorrarClienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListarClientePorId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ListarClientePorId(int id) {
            object[] results = this.Invoke("ListarClientePorId", new object[] {
                        id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ListarClientePorIdAsync(int id) {
            this.ListarClientePorIdAsync(id, null);
        }
        
        /// <remarks/>
        public void ListarClientePorIdAsync(int id, object userState) {
            if ((this.ListarClientePorIdOperationCompleted == null)) {
                this.ListarClientePorIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListarClientePorIdOperationCompleted);
            }
            this.InvokeAsync("ListarClientePorId", new object[] {
                        id}, this.ListarClientePorIdOperationCompleted, userState);
        }
        
        private void OnListarClientePorIdOperationCompleted(object arg) {
            if ((this.ListarClientePorIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListarClientePorIdCompleted(this, new ListarClientePorIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    public delegate void CrearClienteCompletedEventHandler(object sender, CrearClienteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CrearClienteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CrearClienteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    public delegate void ObtenerClientesCompletedEventHandler(object sender, ObtenerClientesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObtenerClientesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObtenerClientesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    public delegate void ActualizarClienteCompletedEventHandler(object sender, ActualizarClienteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActualizarClienteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActualizarClienteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    public delegate void BorrarClienteCompletedEventHandler(object sender, BorrarClienteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BorrarClienteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BorrarClienteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    public delegate void ListarClientePorIdCompletedEventHandler(object sender, ListarClientePorIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListarClientePorIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListarClientePorIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
